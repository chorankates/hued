#!/usr/bin/env ruby
# hued - CLI for Hued module

# TODO marshal the light/scene settings to DB so they can be reasoned about

# this isn't required if the gem is installed, but, we can't be sure
require sprintf('%s/../lib/hued', File.expand_path(File.dirname(__FILE__)))

require 'optparse'
require 'socket'

def parse_input
  options = Hash.new

  parser = OptionParser.new do |o|
    o.on('--ip <ip>', 'IP address of Phillips Hue Hub') do |p|
      options[:ip] = p
    end
    o.on('--token <token>', 'whitelisted token') do |p|
      options[:token] = p
    end
    o.on('--command <command>', 'face to use') do |p|
      options[:face] = p
    end
  end

  parser.parse!
  options
end

options = parse_input

[
  :ip,
  :token,
  :command,
].each do |r|
  #raise StandardError.new(sprintf('missing required value[%s]', r)) if options[r].nil? and ! options[:command].eql?('impersonate')
end

puts "options: #{options}"

if options[:command].eql?('impersonate')
  Hued::Application.impersonate
else
  a = Hued::Application.new(options)

  if face.eql?('demo')
    a.demo
  elsif face.eql?('backup')
    # download all configs/settings
    a.hub.backup
  elsif face.eql?('restore')
    # restore all configs/settings
    a.hub.restore
  else
    a.repl
  end
end